from pathlib import Path

from snakemake.io import expand
from snakemake.utils import validate


## configuration ##

validate(config, "schemas/config.yml")

## variables ##
repo = Path(config["repo"])
root = Path(config["out"])

## rules ##

####################################################################################################
# mep
####################################################################################################

rule mkff:
  output:
    repo / "genbank" / "ff.db"
  params:
    repo = repo / "genbank" / "ff",
    term = config["term"],
    email = config["email"]
  shell:
    """
    python -m ffbio.ffdb {params.repo:q} -term {params.term:q} -rettype gb -email {params.email}
    """

rule meta:
  input:
    ffdb = rules.mkff.output,
    type = config["genotype"]
  output: repo / "meta" / "meta.tsv"
  threads: config["threads"]
  shell:
    """
    python -m ffbio.ffidx {input.ffdb:q} -dump -fo gb | \
    python -m ffbio.ffqual - db_xref collection_date country -description | \
    sed "s/^id/accver/1" | \
    Rscript --vanilla ./workflow/scripts/date.R - $'\t' date %Y-%m-%d collection_date dbY Ymd bY Y | \
    awk -F '\t' '$6 != "?"' | \
    Rscript --vanilla ./workflow/scripts/geog.R - $'\t' country "[:,]" {threads} > {output:q}.tmp
    {{
      awk \
        -F '\t' -v OFS='\t' \
        'NR == 1 {{ print "strain", $1, $2, $3, $6, $7, $8, $9, "genotype"; }}' \
        {output:q}.tmp
      join \
        -t $'\t' \
        -a 1 \
        -o 1.1,1.1,1.2,1.3,1.6,1.7,1.8,1.9,2.2 \
        -e '?' \
        <(tail -n +2 {output:q}.tmp | sort -b) \
        <(sort -b {input.type:q})
    }} > {output:q}
    rm {output:q}.tmp
    """

rule coor:
  input: rules.meta.output
  output: repo / "meta" / "coor.tsv"
  shell:
    """
    awk -F '\t' -v OFS='\t' '$8 != "?" && NR > 1 {{ print "location", $6, $7, $8; }}' {input:q} | \
    sort -u > \
    {output:q}
    """

rule taxa:
  input: rules.meta.output
  output: repo / "meta" / "taxid.ssv"
  shell:
    """
    awk -F '\t' 'NR > 1 {{ match($4, /taxon:([0-9]+)/, arr); print $1, arr[1] ? arr[1] : 0; }}' {input:q} > \
    {output:q}
    """

rule mkdb:
  input:
    repo = rules.mkff.output,
    taxa = rules.taxa.output
  params:
    repo / "blast"
  output:
    expand(
      repo / "blast" / "db.{ext}",
      ext = ("log", "ndb", "nhd", "nin", "nog", "nos", "not", "nsq", "ntf", "nto", "perf")
    )
  shell:
    """
    mkdir -p {params:q}
    cut -f 1 -d ' ' {input.taxa:q} | \
    python -m ffbio.ffidx {input.repo:q} -batch - | \
    makeblastdb \
      -in - -input_type fasta -dbtype nucl -title db -parse_seqids -hash_index \
      -out {params:q}/db -blastdb_version 5 -logfile {params:q}/db.log -taxid_map {input.taxa:q}
    """

rule reference:
  input: repo / "genbank" / "ff.db"
  params: config["accv"]
  output:
    fasta = root / config["name"] / "ref.fasta",
    genbank = root / config["name"] / "ref.gb"
  shell:
    """
    python -m ffbio.ffidx {input:q} -entry {params:q} -fo fasta > {output.fasta:q}
    python -m ffbio.ffidx {input:q} -entry {params:q} -fo genbank | \
      ./workflow/scripts/add_locus_tag.py > \
      {output.genbank:q}
    """

rule blast:
  input:
    rules.reference.output.fasta
  params:
    db = repo / "blast" / "db",
    task = config["task"],
    accv = config["accv"],
    naln = config["naln"]
  output:
    root / config["name"] / "blast.tsv"
  threads:
    config["threads"]
  shell:
    """
    blastn \
      -task {params.task:q} \
      -db {params.db:q} \
      -query {input:q} \
      -outfmt "7 std qlen sstrand staxid stitle" \
      -num_threads {threads} \
      -num_alignments {params.naln:q} \
      -subject_besthit > \
      {output:q}
    """

rule qpidcov:
  input: rules.blast.output
  output: root / config["name"] / "pidcov.tsv"
  shell:
    """
    {{
      printf "accver\tsstart\tsend\tsstrand\tqpidcov\n";
      awk -F '\t' -v OFS='\t' '/^[^#]/ {{ print $2, $9, $10, $14, ($8 - $7 + 1) / $13 * $3 / 100; }}' {input:q} | \
      sort -n -k 5;
    }} > \
    {output:q}
    """

rule blastdbcmd:
  input:
    rules.qpidcov.output
  params:
    db = repo / "blast" / "db",
    qpidcov = config["qpidcov"]
  output:
    root / config["name"] / "seqs.fasta"
  shell:
    """
    awk -F '\t' -v OFS=' ' -v qpidcov={params.qpidcov:q} 'NR > 1 && $5 >= qpidcov' {input:q} | \
    cut -f 1-4 | \
    xargs printf "%s %s-%s %s\n" | \
    blastdbcmd -db {params.db} -entry_batch - | \
    sed -e "/^>/ s/ .*//g" -e "s/:.*//g" -e "/^[^>]/ s/[^ACGTNacgtn-]/n/g" > \
    {output:q}
    """

####################################################################################################
# phylogeny
####################################################################################################

rule mafft:
  input: rules.blastdbcmd.output
  output: root / config["name"] / "msa.fasta"
  log: root / config["name"] / "msa.log"
  threads: config["threads"]
  shell:
    """
    mafft --auto --thread {threads} {input:q} > {output:q} 2> {log:q}
    """

rule iqtree:
  input:
    rules.mafft.output
  params:
    prefix = root / config["name"] / "iqt",
    seed = config["seed"],
    alrt = config["alrt"],
    bb = config["bb"]
  output:
    expand(
      root / config["name"] / "iqt.{ext}",
      ext = ("bionj", "ckp.gz", "contree", "iqtree", "mldist", "model.gz", "splits.nex", "state", "ufboot")
    ),
    tree = root / config["name"] / "iqt.treefile"
  log:
    root / config["name"] / "iqt.log"
  threads:
    config["threads"]
  shell:
    """
    iqtree \
      --prefix {params.prefix:q} --seed {params.seed:q} --redo --quiet \
      --threads-max {threads} --allnni -bnni -alrt {params.alrt:q} -bb {params.bb:q} --ancestral \
      -s {input:q} 2> /dev/null
    """

rule gubbins:
  input:
    msa = rules.mafft.output,
    tree = rules.iqtree.output.tree
  output:
    expand(
      root / config["name"] / "gub.{ext}",
      ext = (
        "branch_base_reconstruction.embl",
        "filtered_polymorphic_sites.fasta", "filtered_polymorphic_sites.phylip",
        "node_labelled.final_tree.tre",
        "per_branch_statistics.csv",
        "recombination_predictions.embl",
        "summary_of_snp_distribution.vcf"
      )
    ),
    tree = root / config["name"] / "gub.final_tree.tre",
    gff = root / config["name"] / "gub.recombination_predictions.gff"
  params:
    pwd = Path().absolute(),
    root = root / config["name"],
    itr = config["itr"],
    gap = config["gap"],
    maxw = 1000
  log:
    root / config["name"] / "gub.log"
  threads:
    config["threads"]
  shell:
    """
    cd {params.root:q} || exit && \
    run_gubbins.py \
      {params.pwd:q}/{input.msa:q} \
      -s {params.pwd:q}/{input.tree:q} \
      -i {params.itr} \
      -f {params.gap} \
      -p gub \
      -c {threads} \
      --max_window_size {params.maxw} \
      > gub.log
    """

rule bactdate:
  message: "Infer recombination-aware chronogram using BactDating."
  input:
    tree = rules.gubbins.output.tree,
    meta = repo / "meta" / "meta.tsv"
  output:
    expand(
      root / config["name"] / "bac-{model}.{ext}",
      model = config["model"],
      ext = ("qs", "tree")
    ),
    tsv = root / config["name"] / "bac.tsv",
    tree = root / config["name"] / "bac.tree",
    json = root / config["name"] / "bac.json"
  threads:
    config["threads"]
  params:
    root = str(root.joinpath(config["name"])),
    model = config["model"],
    nbIts = config["nbIts"],
    thin = config["thin"],
    burn = config["burn"],
    seed = config["seed"]
  script: "scripts/bactdate.R"

rule description:
    input:
      rules.bactdate.output.tsv,
      rules.gubbins.output.gff
    output: root.joinpath(config["name"]).joinpath("description.html").absolute()
    params:
      root = str(root.parent.absolute()),
      rmd = str(Path(workflow.basedir).joinpath("scripts/description.Rmd")),
      out = str(root.joinpath(config["name"])),
      ess = config["ess"],
      typ = config["genotype"]
    script: "scripts/description.R"

rule ancestral:
  message: "Reconstructing ancestral sequences and mutations"
  input:
    tree = rules.bactdate.output.tree,
    msa = rules.mafft.output
  output:
    seqs = root / config["name"] / "ancestral.fasta",
    json = root / config["name"] / "muts-nt.json"
  params: config["seed"]
  threads: config["threads"]
  script: "scripts/ancestral.R"

rule translate:
  message: "Translating amino acid sequences"
  input:
    tree = rules.bactdate.output.tree,
    json = rules.ancestral.output.json,
    reference = rules.reference.output.genbank
  output:
    root / config["name"] / "muts-aa.json"
  shell:
    """
    augur translate \
      --tree {input.tree:q} \
      --ancestral-sequences {input.json:q} \
      --reference-sequence {input.reference:q} \
      --output-node-data {output:q}
    """

rule traits:
  message: "Inferring ancestral traits for {params.columns!s}"
  input:
    tree = rules.bactdate.output.tree,
    meta = repo / "meta" / "meta.tsv"
  output:
    root / config["name"] / "traits.json"
  params:
    columns = "location genotype"
  shell:
    """
    augur traits \
      --tree {input.tree:q} \
      --metadata {input.meta:q} \
      --output-node-data {output:q} \
      --columns {params.columns} \
      --confidence
    """

rule export:
  message: "Exporting data files for for auspice"
  input:
    tree = rules.bactdate.output.tree,
    branch_lengths = rules.bactdate.output.json,
    muts_nt = rules.ancestral.output.json,
    muts_aa = rules.translate.output,
    traits = rules.traits.output,
    meta = repo / "meta" / "meta.tsv",
    coor = repo / "meta" / "coor.tsv",
    desc = rules.description.output
  params:
    auspice = config["auspice"],
    title = config["name"]
  output:
    root / config["name"] / "auspice.json"
  shell:
    """
    augur export v2 \
      --tree {input.tree:q} \
      --node-data {input.branch_lengths:q} {input.muts_nt:q} {input.muts_aa:q} {input.traits:q} \
      --output {output:q} \
      --auspice-config {params.auspice:q} \
      --metadata {input.meta:q} \
      --color-by-metadata location country_code genotype \
      --lat-longs {input.coor:q} \
      --title {params.title:q} \
      --description {input.desc:q}
    """
